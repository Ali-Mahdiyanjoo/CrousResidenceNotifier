import json
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Telegram bot token
TELEGRAM_BOT_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
CHAT_IDS_FILE = "/PATH/TO/chat_ids.json"
LOCK_FILE = "/tmp/crous_main.lock"  # Lock file to prevent multiple instances

# Function to handle /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_chat_id = update.effective_chat.id
    print(f"Received /start from chat ID: {user_chat_id}")

    # Load existing chat IDs
    if os.path.exists(CHAT_IDS_FILE):
        with open(CHAT_IDS_FILE, "r") as file:
            chat_ids = json.load(file)
    else:
        chat_ids = []

    # Add the chat ID if not already in the list
    if user_chat_id not in chat_ids:
        chat_ids.append(user_chat_id)
        with open(CHAT_IDS_FILE, "w") as file:
            json.dump(chat_ids, file)
        print(f"Chat ID {user_chat_id} added to {CHAT_IDS_FILE}")
        await context.bot.send_message(
            chat_id=user_chat_id,
            text=(
                "üéâ *Bienvenue dans R√©sidences CROUS !* üéì\n\n"
                "Ce bot est con√ßu pour vous aider √† suivre en temps r√©el üïí les logements disponibles üè† "
                "dans les r√©sidences CROUS √† Strasbourg. Vous recevrez des mises √† jour toutes les 15 minutes. üîÑ\n\n"
                "üìú *Commandes disponibles :*\n\n"
                "    /help : üìñ Affiche la liste des commandes disponibles.\n"
                "    /start : ‚úÖ Inscrivez-vous pour recevoir les notifications.\n"
                "    /stop : ‚ùå D√©sinscrivez-vous des notifications."
            ),
            parse_mode='Markdown'
        )
    else:
        print(f"Chat ID {user_chat_id} is already in {CHAT_IDS_FILE}")
        await context.bot.send_message(
            chat_id=user_chat_id,
            text="üîî Vous √™tes d√©j√† abonn√©(e). Vous recevrez des mises √† jour p√©riodiques."
        )

# Function to handle /help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            "üìú *Commandes disponibles :*\n\n"
            "    /help : üìñ Affiche la liste des commandes disponibles et leur description.\n"
            "    /start : ‚úÖ Inscrivez-vous pour recevoir les notifications.\n"
            "    /stop : ‚ùå D√©sinscrivez-vous des notifications.\n\n"
            "‚ú® *Fonctionnalit√©s principales :*\n\n"
            "    üîî Notifications automatiques toutes les 15 minutes.\n"
            "    üèòÔ∏è Possibilit√© de choisir des r√©sidences sp√©cifiques.\n"
            "    ‚ö° Interface simple et rapide pour rester inform√© des disponibilit√©s en temps r√©el."
        ),
        parse_mode='Markdown'
    )

# Function to handle /stop command
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_chat_id = update.effective_chat.id
    print(f"Received /stop from chat ID: {user_chat_id}")

    # Load existing chat IDs
    if os.path.exists(CHAT_IDS_FILE):
        with open(CHAT_IDS_FILE, "r") as file:
            chat_ids = json.load(file)
    else:
        chat_ids = []

    # Remove the chat ID if it exists in the list
    if user_chat_id in chat_ids:
        chat_ids.remove(user_chat_id)
        with open(CHAT_IDS_FILE, "w") as file:
            json.dump(chat_ids, file)
        print(f"Chat ID {user_chat_id} removed from {CHAT_IDS_FILE}")
        await context.bot.send_message(
            chat_id=user_chat_id,
            text="üö´ Vous avez √©t√© d√©sabonn√©(e). Vous ne recevrez plus de mises √† jour."
        )
    else:
        print(f"Chat ID {user_chat_id} not found in {CHAT_IDS_FILE}")
        await context.bot.send_message(
            chat_id=user_chat_id,
            text="‚ùå Vous n'√™tes pas abonn√©(e). Aucun changement effectu√©."
        )

# Main function to set up the bot
def run_bot():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Register command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stop", stop))

    print("Bot is running...")
    application.run_polling()

if __name__ == '__main__':
    if os.path.exists(LOCK_FILE):
        print("Another instance is running. Exiting.")
        sys.exit(0)
    try:
        with open(LOCK_FILE, "w") as lock_file:
            lock_file.write(str(os.getpid()))
        
        run_bot()
    finally:
        if os.path.exists(LOCK_FILE):
            os.remove(LOCK_FILE)